'''
unSSL.py

Copyright 2006 Andres Riancho

This file is part of w3af, w3af.sourceforge.net .

w3af is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation version 2 of the License.

w3af is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with w3af; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

'''

import core.controllers.outputManager as om
# options
from core.data.options.option import option
from core.data.options.optionList import optionList

from core.controllers.basePlugin.baseAuditPlugin import baseAuditPlugin
import core.data.kb.knowledgeBase as kb
from core.controllers.w3afException import w3afException
import core.data.kb.vuln as vuln
from core.data.parsers.urlParser import *
import core.data.constants.severity as severity

class unSSL(baseAuditPlugin):
    '''
    Find out if secure content can also be fetched using http.
    @author: Andres Riancho ( andres.riancho@gmail.com )
    '''

    def __init__(self):
        baseAuditPlugin.__init__(self)

    def _fuzzRequests(self, freq ):
        '''
        Check if the protocol specified in freq is https and fetch the same URL using http. 
        ie:
            input: https://a/
            check: http://a/
        
        @param freq: A fuzzableRequest
        '''

        if 'HTTPS' == getProtocol( freq.getURL() ).upper():
            secure = freq.getURL()
            unsecure = 'http://' + allButScheme(freq.getURL())
            
            httpsResponse = self._sendMutant( freq )
            freq.setURL( unsecure )
            httpResponse = self._sendMutant( freq )
            
            if httpResponse.getCode() == httpsResponse.getCode():
                if httpResponse.getBody() == httpsResponse.getBody():
                    v = vuln.vuln( freq )
                    v.setName( 'Secure content over insecure channel' )
                    v.setSeverity(severity.MEDIUM)
                    v.setDesc( 'Secure content can be accesed using insecure protocol http. The URLs are: ' + secure + ' - ' + unsecure + ' .' )
                    v.setId( httpResponse.id )
                    kb.kb.append( self, 'unSSL', v )
                    om.out.vulnerability( v.getDesc(), severity=v.getSeverity() )
    
    def _analyzeResult( self, fuzzableRequest, res ):
        pass
        
    def getOptions( self ):
        '''
        @return: A list of option objects for this plugin.
        '''    
        ol = optionList()
        return ol

    def setOptions( self, OptionList ):
        '''
        This method sets all the options that are configured using the user interface 
        generated by the framework using the result of getOptions().
        
        @parameter OptionList: A dictionary with the options for the plugin.
        @return: No value is returned.
        ''' 
        pass

    def getPluginDeps( self ):
        '''
        @return: A list with the names of the plugins that should be runned before the
        current one.
        '''
        return []

    def getLongDesc( self ):
        '''
        @return: A DETAILED description of the plugin functions and features.
        '''
        return '''
        This plugin verifies that URL's that are available using HTTPS aren't available over an insecure
        HTTP protocol.

        To detect this, the plugin simply requests "https://abc/a.asp" and "http://abc.asp" and if both are 
        equal, a vulnerability is found.
        '''
