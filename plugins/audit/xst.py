'''
xst.py

Copyright 2007 Andres Riancho

This file is part of w3af, w3af.sourceforge.net .

w3af is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation version 2 of the License.

w3af is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with w3af; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
'''

from core.data.fuzzer.fuzzer import *
import core.controllers.outputManager as om
from core.controllers.basePlugin.baseAuditPlugin import baseAuditPlugin
import core.data.parsers.urlParser as urlParser
import core.data.kb.vuln as vuln
import core.data.kb.knowledgeBase as kb
from core.data.fuzzer.mutant import mutant
import re
import core.data.constants.severity as severity

class xst(baseAuditPlugin):
    '''
    Verify Cross Site Tracing vulnerabilities. 

    @author: Josh Summitt (ascetik@gmail.com)
    '''

    def __init__(self):
        baseAuditPlugin.__init__(self)
        self._exec = True
    

    def _fuzzRequests(self, freq ):
        '''
        Verify xst vulns by sending a TRACE request and analyzing the response.
        '''
    
        if not self._exec:
            # Do nothing
            pass
        else:
            # This will raise the exception the next time _fuzzRequests is run and remove the plugin from the list
            self._exec = False  
            
            # Create a mutant based on a fuzzable request
            # It is really important to use A COPY of the fuzzable request, and not the original.
            # The reason: I'm changing the method and the URL !
            frCopy = freq.copy()
            frCopy.setURL( urlParser.getDomainPath( frCopy.getURL() ) )
            frCopy.setMethod('TRACE')
            myMutant = mutant(frCopy)
           
            # Add a header. I search for this value to determine if XST is valid
            myheader = { 'FalseHeader': 'XST'}
            myMutant.setHeaders(myheader)
            
            # send the request to the server and recode the response
            response = self._sendMutant( myMutant, analyze=False )
            
            # create a regex to test the response. 
            regex = re.compile("[FalseHeader: XST]")
            if re.match(regex,response.getBody()):
                # If vulnerable record it. This will now become visible on the html Report
                v = vuln.vuln( freq )
                v.setId( response.id )
                v.setSeverity(severity.LOW)
                v.setName( 'Cross site tracing vulnerability' )
                v.setDesc( 'The web server at "'+ response.getURL() +'" is vulnerable to Cross Site Tracing.' )
                om.out.vulnerability( v.getDesc() )
                kb.kb.append( self, 'xst', v )
            
    def getPluginDeps( self ):
        '''
        @return: A list with the names of the plugins that should be runned before the
        current one.
        '''
        return []           
            
    def getLongDesc( self ):
        '''
        @return: A DETAILED description of the plugin functions and features.
        '''
        return '''
        This plugin finds the Cross Site Tracing (XST) vulnerability.
        
        No Configurable Paramaters.
            
        The TRACE method echos back requests sent to it. This plugin sends a 
        TRACE request to the server and if the request is echoed back then XST 
        is confirmed.
        '''

    def getOptionsXML(self):
        '''
        This method returns a XML containing the Options that the plugin has.
        Using this XML the framework will build a window, a menu, or some other input method to retrieve
        the info from the user. The XML has to validate against the xml schema file located at :
        w3af/core/ui/userInterface.dtd
        
        @return: XML with the plugin options.
        ''' 
        return  '<?xml version="1.0" encoding="ISO-8859-1"?>\
        <OptionList>\
        </OptionList>\
        '
        
    def setOptions( self, OptionList ):
        '''
        This method sets all the options that are configured using the user interface 
        generated by the framework using the result of getOptionsXML().
        
        @parameter OptionList: A dictionary with the options for the plugin.
        @return: No value is returned.
        ''' 
        pass
    
    
