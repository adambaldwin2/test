'''
googleSafeBrowsing.py

Copyright 2006 Andres Riancho

This file is part of w3af, w3af.sourceforge.net .

w3af is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation version 2 of the License.

w3af is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with w3af; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

'''

import core.controllers.outputManager as om

# options
from core.data.options.option import option
from core.data.options.optionList import optionList

from core.controllers.basePlugin.baseDiscoveryPlugin import baseDiscoveryPlugin

import core.data.kb.knowledgeBase as kb
import core.data.kb.vuln as vuln
import core.data.constants.severity as severity
import core.data.parsers.urlParser as urlParser
from core.controllers.w3afException import w3afRunOnce

import socket
import re


class googleSafeBrowsing(baseDiscoveryPlugin):
    '''
    Search the Google Safe Browsing database to determine if your server is (or was) being used in phishing scams.
    
    @author: Andres Riancho ( andres.riancho@gmail.com )
    '''

    def __init__(self):
        baseDiscoveryPlugin.__init__(self)

        # Internal variables
        self._run = True
        self._gsb_url = 'http://sb.google.com/safebrowsing/update?version=goog-black-url:1:-1'
        self._fuzzable_requests = []
        
    def discover(self, fuzzableRequest ):
        '''
        Runs pykto to the site.
        
        @parameter fuzzableRequest: A fuzzableRequest instance that contains
                                    (among other things) the URL to test.
        '''
        self._fuzzable_requests = []
        
        if not self._run:
            # This will remove the plugin from the discovery plugins to be runned.
            raise w3afRunOnce()
        else:
            # Run one time
            self._run = False

            # Get the database
            bad_domain_db = self._get_db()
            
            # Get the list of domains / IP addresses to check
            domain = urlParser.getDomain( fuzzableRequest.getURL() )
            to_check_list = self._get_to_check( domain )
            
            # Check if any of the domains is in the db
            gsb_matches = self._is_in_gsb( to_check_list, bad_domain_db )

            for url in gsb_matches:
                response = self._urlOpener.GET( url )
                self._fuzzable_requests.extend( self._createFuzzableRequests( response ) )
                
                v = vuln.vuln()
                v.setURL( url )
                v.setId( response.id )
                v.setSeverity( severity.MEDIUM )
                msg = 'According to google safe browsing, the URL: "' + url + '" is involved'
                msg += ' in a phishing scam.'
                v.setDesc( msg )
                om.out.vulnerability( v.getDesc(), severity=v.getSeverity() )
                kb.kb.append(self, 'gsb', v)
                
        return self._fuzzable_requests
        
    def _get_to_check( self, domain ):
        '''
        @return: From the domain, get a list of fqdn, root_domain and IP address.
        '''
        res = []
        
        addrinfo = None
        try:
            addrinfo = socket.getaddrinfo( domain, 0)
        except socket.gaierror:
            pass
        else:
            res.extend( [info[4][0] for info in addrinfo] )
        
        fqdn = ''
        try:
            fqdn = socket.getfqdn( domain )
        except:
            pass
        else:
            res.append( fqdn )
            
        root_domain = urlParser.getRootDomain( domain )
        res.append( root_domain )

        # uniq        
        res = list( set( res ) )
        return res
            
        
    def _is_in_gsb( self, to_check_list, bad_domain_db ):
        '''
        Reads the googleSafeBrowsing db and tries to match the entries on that db with the to_check_list

        @return: A list with the sites to match against the googleSafeBrowsing db
        '''
        res = []
        for to_check in to_check_list:
            for url in bad_domain_db:
                if url.startswith('http://' + to_check) or \
                url.startswith('https://' + to_check):
                    res.append( url )
        return res
        
    def setOptions( self, optionsMap ):
        '''
        This method sets all the options that are configured using the user int_erface 
        generated by the framework using the result of getOptions().
        
        @parameter OptionList: A dictionary with the options for the plugin.
        @return: No value is returned.
        ''' 
        self._gsb_url = optionsMap['dbURL'].getValue()
        
    def getOptions( self ):
        '''
        @return: A list of option objects for this plugin.
        '''
        d1 = 'The URL to the google Safe Browsing database.'
        h1 = 'The default is ok in most cases.'
        o1 = option('dbURL', self._gsb_url, d1, 'string', help=h1)
        
        ol = optionList()
        ol.add(o1)
        return ol

    def _get_db(self):
        '''
        This method is called to update the database.
        '''
        om.out.information('Trying to download the google safe browsing database, please wait...')
        response = self._urlOpener.GET( self._gsb_url )
        om.out.information('Done downloading DB from google!')
        # Parsing list
        return re.findall( '\+(.*?)\t.*?\n', response.getBody() )
        
        
    def getPluginDeps( self ):
        '''
        @return: A list with the names of the plugins that should be runned before the
        current one.
        '''
        return []

    def getLongDesc( self ):
        '''
        @return: A DETAILED description of the plugin functions and features.
        '''
        return '''
        This plugin searches the domain being tested in the google safe browsing database.
        If your site is in this database the chances are that you were hacked and your server is now being
        used in phishing attacks.
        '''
