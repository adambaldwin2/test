'''
crossDomain.py

Copyright 2006 Andres Riancho

This file is part of w3af, w3af.sourceforge.net .

w3af is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation version 2 of the License.

w3af is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with w3af; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

'''

import core.controllers.outputManager as om
from core.controllers.basePlugin.baseDiscoveryPlugin import baseDiscoveryPlugin
import core.data.kb.knowledgeBase as kb
import core.data.kb.vuln as vuln
import core.data.kb.info as info
import core.data.parsers.urlParser as urlParser
from core.controllers.w3afException import *
import core.data.constants.severity as severity

class crossDomain(baseDiscoveryPlugin):
    '''
    Analyze the crossdomain.xml file.
    @author: Andres Riancho ( andres.riancho@gmail.com )
    '''

    def __init__(self):
        baseDiscoveryPlugin.__init__(self)
        self._exec = True

    def discover(self, fuzzableRequest ):
        '''
        Get the crossdomain.xml file and parse it.
        
        @parameter fuzzableRequest: A fuzzableRequest instance that contains (among other things) the URL to test.
        '''
        dirs = []
        if not self._exec :
            # This will remove the plugin from the discovery plugins to be runned.
            raise w3afRunOnce()
            
        else:
            # Only run once
            self._exec = False
            
            self.is404 = kb.kb.getData( 'error404page', '404' )
            
            baseUrl = urlParser.baseUrl( fuzzableRequest.getURL() )
            crossDomainUrl = urlParser.urlJoin(  baseUrl , 'crossdomain.xml' )
            response = self._urlOpener.GET( crossDomainUrl, useCache=True )
            
            if not self.is404( response ):
                dirs.extend( self._createFuzzableRequests( response ) )
                
                import xml.dom.minidom
                try:
                    dom = xml.dom.minidom.parseString( response.getBody() )
                except:
                    raise w3afException('Error while parsing crossdomain.xml')
                
                urlList = dom.getElementsByTagName("allow-access-from")
                for url in urlList:
                    url = url.getAttribute('domain')
                    
                    if url == '*':
                        v = vuln.vuln()
                        v.setURL( response.getURL() )
                        v.setMethod( 'GET' )
                        v.setName( 'Insecure crossdomain.xml settings' )
                        v.setSeverity(severity.LOW)
                        v.setDesc( 'The crossdomain.xml file at ' +  urlParser.baseUrl( fuzzableRequest.getURL() ) + '/crossdomain.xml allows flash access from any site.')
                        v.setId( response.id )
                        kb.kb.append( self, 'vuln', v )
                        om.out.vulnerability( v.getDesc() )
                    else:
                        i = info.info()
                        i.setName('Crossdomain allow ACL')
                        i.setURL( response.getURL() )
                        i.setMethod( 'GET' )
                        i.setDesc( 'Crossdomain.xml file allows access from domain: ' + url )
                        i.setId( response.id )
                        kb.kb.append( self, 'info', i )
                        om.out.information( i.getDesc() )
        
        return dirs
        
    def getOptionsXML(self):
        '''
        This method returns a XML containing the Options that the plugin has.
        Using this XML the framework will build a window, a menu, or some other input method to retrieve
        the info from the user. The XML has to validate against the xml schema file located at :
        w3af/core/ui/userInterface.dtd
        
        @return: XML with the plugin options.
        ''' 
        return  '<?xml version="1.0" encoding="ISO-8859-1"?>\
        <OptionList>\
        </OptionList>\
        '

    def setOptions( self, OptionList ):
        '''
        This method sets all the options that are configured using the user interface 
        generated by the framework using the result of getOptionsXML().
        
        @parameter OptionList: A dictionary with the options for the plugin.
        @return: No value is returned.
        ''' 
        pass

    def getPluginDeps( self ):
        '''
        @return: A list with the names of the plugins that should be runned before the
        current one.
        '''
        return []
        
    def getLongDesc( self ):
        '''
        @return: A DETAILED description of the plugin functions and features.
        '''
        return '''
        This plugin searches for the crossdomain.xml file used by flash, and parses it.
        
        This file is used by Flash as an ACL that defines what domains can access the domain that
        contains the file. By parsing this file, you can get more information about relationships between sites.
        '''
