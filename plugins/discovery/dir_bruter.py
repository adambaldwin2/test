'''
dir_bruter.py

Copyright 2009 Jon Rose

This file is part of w3af, w3af.sourceforge.net .

w3af is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation version 2 of the License.

w3af is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with w3af; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

'''

import core.controllers.outputManager as om

# options
from core.data.options.option import option
from core.data.options.optionList import optionList

from core.controllers.basePlugin.baseDiscoveryPlugin import baseDiscoveryPlugin
from core.controllers.w3afException import w3afRunOnce
import core.data.parsers.urlParser as urlParser
import os

import core.data.kb.knowledgeBase as kb


class dir_bruter(baseDiscoveryPlugin):
    '''
    Finds Web server directories by bruteforcing.

    @author: Jon Rose ( jrose@owasp.org )
    @author: Andres Riancho ( andres@bonsai-sec.com )
    '''
    def __init__(self):
        baseDiscoveryPlugin.__init__(self)
        self._exec = True
        
        # User configured parameters
        self._dir_list = 'plugins' + os.path.sep + 'discovery' + os.path.sep + 'dir_bruter'
        self._dir_list += os.path.sep + 'common_dirs_small.db'

        # Internal variables
        self._fuzzable_requests = []

    def discover(self, fuzzableRequest ):
        '''
        Get the file and parse it.
        @parameter fuzzableRequest: A fuzzableRequest instance that contains
                                                      (among other things) the URL to test.
        '''
        if not self._exec:
            raise w3afRunOnce()
        else:
            # Only run once
            self._exec = False
            is_404 = kb.kb.getData( 'error404page', '404' )

            self._fuzzable_requests = []

            base_url = urlParser.baseUrl( fuzzableRequest.getURL() )
            
            for directory_name in file(self._dir_list):
                dir_url = urlParser.urlJoin(  base_url , directory_name.strip() )  
                dir_url +=  '/'
                #om.out.debug( '[dir_bruter] Trying ' + dir_url )
                http_response = self._urlOpener.GET( dir_url, useCache=True )
                    
                if not is_404( http_response ):
                    fuzzable_reqs = self._createFuzzableRequests( http_response )
                    self._fuzzable_requests.extend( fuzzable_reqs )
        
        return self._fuzzable_requests

    def getOptions( self ):
        '''
        @return: A list of option objects for this plugin.
        '''    
        
        d1 = 'Wordlist to use in directory bruteforcing process.'
        o1 = option('wordlist', self._dir_list , d1, 'string')

        ol = optionList()
        ol.add(o1)

        return ol
        

    def setOptions( self, OptionList ):
        '''
        This method sets all the options that are configured using the user interface 
        generated by the framework using the result of getOptions().
        
        @parameter OptionList: A dictionary with the options for the plugin.
        @return: No value is returned.
        ''' 
        dir_list = OptionList['wordlist'].getValue()
        if os.path.exists( dir_list ):
            self._dir_list = dir_list

    def getPluginDeps( self ):
        '''
        @return: A list with the names of the plugins that should be runned before the
        current one.
        '''
        return []

    def getLongDesc( self ):
        '''
        @return: A DETAILED description of the plugin functions and features.
        '''
        return '''
        This plugin finds directories on a web server by bruteforcing the names using a list.

        One configurable parameter exists:
            - wordlist: The wordlist to be used in the directory bruteforce process.
        '''
