'''
importResults.py

Copyright 2006 Andres Riancho

This file is part of w3af, w3af.sourceforge.net .

w3af is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation version 2 of the License.

w3af is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with w3af; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

'''

import core.controllers.outputManager as om
from core.controllers.basePlugin.baseDiscoveryPlugin import baseDiscoveryPlugin
from core.data.request.frFactory import createFuzzableRequestRaw
from core.controllers.w3afException import w3afRunOnce
import core.data.parsers.urlParser as urlParser

class importResults(baseDiscoveryPlugin):
    '''
    Import URLs found by other tools.
    @author: Andres Riancho ( andres.riancho@gmail.com )
    '''
    def __init__(self):
        baseDiscoveryPlugin.__init__(self)
        self._exec = True
        
        # User configured parameters
        self._inputFile = ''

    def discover(self, fuzzableRequest ):
        '''
        Read the input file, and create the fuzzableRequests based on that information.
        
        @parameter fuzzableRequest: A fuzzableRequest instance that contains (among other things) the URL to test.
        '''
        if not self._exec:
            # This will remove the plugin from the discovery plugins to be runned.
            raise w3afRunOnce()
        else:
            self._exec = False
            res = []
            
            if self._inputFile != '':
                try:
                    iFileHandler = file( self._inputFile )
                except Exception, e:
                    om.out.error('An error was found while trying to read the input file: ', str(e))
                else:
                    for line in iFileHandler:
                        obj = self._objFromFile( line.strip() )
                        if obj:
                            res.append( obj )
                        
        return res
    
    def _objFromFile( self, csvLine ):
        '''
        @return: A fuzzableRequest based on the csvLine.
        '''
        try:
            method, uri, postdata = csvLine.split(',')
        except:
            om.out.error('The file format is incorrect, an error was found while parsing:' + csvLine)
        else:
            # Create the obj based on the information
            return createFuzzableRequestRaw( method, uri, postdata, {} )
    
    def getOptionsXML(self):
        '''
        This method returns a XML containing the Options that the plugin has.
        Using this XML the framework will build a window, a menu, or some other input method to retrieve
        the info from the user. The XML has to validate against the xml schema file located at :
        w3af/core/ui/userInterface.dtd
        
        @return: XML with the plugin options.
        ''' 
        return  '<?xml version="1.0" encoding="ISO-8859-1"?>\
        <OptionList>\
            <Option name="inputFile">\
                <default>'+str(self._inputFile)+'</default>\
                <desc>Define the input file from which to create the fuzzable requests</desc>\
                <desc>The input file is comma separated and holds the following data: HTTP-METHOD,URI,POSTDATA</desc>\
                <type>string</type>\
            </Option>\
        </OptionList>\
        '

    def setOptions( self, optionsMap ):
        '''
        This method sets all the options that are configured using the user interface 
        generated by the framework using the result of getOptionsXML().
        
        @parameter optionsMap: A dictionary with the options for the plugin.
        @return: No value is returned.
        ''' 
        self._inputFile = optionsMap['inputFile']
        
    def getPluginDeps( self ):
        '''
        @return: A list with the names of the plugins that should be runned before the
        current one.
        '''
        return []
    
    def getLongDesc( self ):
        '''
        @return: A DETAILED description of the plugin functions and features.
        '''
        return '''
        This plugin serves as an entry point for the results of other tools that search for URLs. The plugin reads
        an input file that is comma separated and holds the following data: HTTP-METHOD,URI,POSTDATA.
        
        One configurable parameter exists:
            - inputFile
        '''
